package org.eblocker.lists.malware;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Properties;

public class DnsResolverServiceTest {
    private DnsResolver dnsResolver;
    private DnsResolverService dnsResolverService;

    @Before
    public void setUp() throws UnknownHostException {
        Properties properties = new Properties();
        properties.put("provider.malwarepatrol.dns.errorRatio", "0.5");
        properties.put("provider.malwarepatrol.dns.threads", "2");
        properties.put("provider.malwarepatrol.dns.timeoutSeconds", "1");

        dnsResolver = Mockito.mock(DnsResolver.class);
        Mockito.when(dnsResolver.resolve("notfound.me")).thenThrow(UnknownHostException.class);
        Mockito.when(dnsResolver.resolve("resolve.me")).thenReturn(
            new InetAddress[]{
                Inet4Address.getByName("8.8.8.8"),
                Inet4Address.getByName("8.8.4.4"),
                Inet6Address.getByName("2001:4860:4860::8888")
            });
        dnsResolverService = new DnsResolverService(properties, dnsResolver);
    }

    @Test
    public void test() throws NameResolutionException {
        List<HostPortTuple> unresolved = Arrays.asList(
            new HostPortTuple("resolve.me", 1234),
            new HostPortTuple("resolve.me", 2345)
        );
        Collection<HostPortTuple> result = dnsResolverService.resolveHosts(unresolved);
        Assert.assertEquals(6, result.size());
        Assert.assertTrue(result.contains(new HostPortTuple("8.8.8.8", 1234)));
        Assert.assertTrue(result.contains(new HostPortTuple("8.8.8.8", 2345)));
        Assert.assertTrue(result.contains(new HostPortTuple("8.8.4.4", 1234)));
        Assert.assertTrue(result.contains(new HostPortTuple("8.8.4.4", 2345)));
        Assert.assertTrue(result.contains(new HostPortTuple("2001:4860:4860:0:0:0:0:8888", 1234)));
        Assert.assertTrue(result.contains(new HostPortTuple("2001:4860:4860:0:0:0:0:8888", 2345)));
    }

    @Test(expected = NameResolutionException.class)
    public void testDnsErrorRate() throws Exception {
        List<HostPortTuple> unresolved = Arrays.asList(
            new HostPortTuple("resolve.me", 1234),
            new HostPortTuple("notfound.me", 1234)
        );
        dnsResolverService.resolveHosts(unresolved);
    }

    @Test(expected = NameResolutionException.class)
    public void testMalwareEntriesDnsTimeout() throws Exception {
        List<HostPortTuple> unresolved = Arrays.asList(
            new HostPortTuple("resolve.me", 1234),
            new HostPortTuple("resolve.me", 2345)
        );
        Mockito.when(dnsResolver.resolve(Mockito.anyString())).thenAnswer(im -> {
            Thread.sleep(1100);
            return Inet4Address.getByName("1.2.3.4");
        });
        dnsResolverService.resolveHosts(unresolved);
    }
}
