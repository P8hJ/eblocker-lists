/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.lists.malware;

import org.eblocker.server.common.malware.MalwareEntry;
import com.google.common.collect.Sets;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Properties;

public class MalwarePatrolProviderTest {

    private DnsResolver dnsResolver;
    private MalwarePatrolDownloader downloader;
    private MalwarePatrolProvider provider;

    @Before
    public void setUp() throws UnknownHostException {
        Properties properties = new Properties();
        properties.put("provider.malwarepatrol.dns.errorRatio", "0.5");
        properties.put("provider.malwarepatrol.dns.threads", "2");
        properties.put("provider.malwarepatrol.dns.timeoutSeconds", "1");

        downloader = Mockito.mock(MalwarePatrolDownloader.class);
        dnsResolver = Mockito.mock(DnsResolver.class);
        Mockito.when(dnsResolver.resolve("resolve2.me")).thenThrow(UnknownHostException.class);
        Mockito.when(dnsResolver.resolve("resolve.me")).thenReturn(new InetAddress[] { Inet4Address.getByName("8.8.8.8"), Inet4Address.getByName("8.8.4.4"), Inet6Address.getByName("2001:4860:4860::8888")});
        provider = new MalwarePatrolProvider(properties, downloader, dnsResolver);
    }

    @Test
    public void getMalwareEntriesNoDns() throws Exception {
        Mockito.when(downloader.retrieveEntries()).thenReturn(Arrays.asList(
            new MalwareEntry("google.com/malware", new String[] { "malware 0", "malware 1" }),
            new MalwareEntry("blog.com/cgi-bin", new String[] { "malware 2" })
        ));

        MalwareEntries entries = provider.getMalwareEntries();
        Assert.assertNotNull(entries);
        Assert.assertNotNull(entries.getFilteredUrls());
        Assert.assertEquals(2, entries.getFilteredUrls().size());
        Assert.assertEquals("google.com/malware", entries.getFilteredUrls().get(0).getUrl());
        Assert.assertArrayEquals(new String[] { "malware 0", "malware 1" }, entries.getFilteredUrls().get(0).getHostedMalware());
        Assert.assertEquals("blog.com/cgi-bin", entries.getFilteredUrls().get(1).getUrl());
        Assert.assertArrayEquals(new String[] { "malware 2" }, entries.getFilteredUrls().get(1).getHostedMalware());
        Assert.assertEquals(Collections.emptyMap(), entries.getFilteredIpPorts());
    }

    @Test
    public void testMalwareEntriesDns() throws Exception {
        Mockito.when(downloader.retrieveEntries()).thenReturn(Arrays.asList(
            new MalwareEntry("google.com/malware", new String[] { "malware 0", "malware 1" }),
            new MalwareEntry("blog.com/cgi-bin", new String[] { "malware 2" }),
            new MalwareEntry("resolve.me:1234/hello", new String[] { "malware 3" }),
            new MalwareEntry("resolve.me:2345/world", new String[] { "malware 4" })
        ));

        MalwareEntries entries = provider.getMalwareEntries();
        Assert.assertNotNull(entries);
        Assert.assertNotNull(entries.getFilteredUrls());
        Assert.assertEquals(4, entries.getFilteredUrls().size());
        Assert.assertEquals("google.com/malware", entries.getFilteredUrls().get(0).getUrl());
        Assert.assertArrayEquals(new String[] { "malware 0", "malware 1" }, entries.getFilteredUrls().get(0).getHostedMalware());
        Assert.assertEquals("blog.com/cgi-bin", entries.getFilteredUrls().get(1).getUrl());
        Assert.assertArrayEquals(new String[] { "malware 2" }, entries.getFilteredUrls().get(1).getHostedMalware());
        Assert.assertEquals("resolve.me:1234/hello", entries.getFilteredUrls().get(2).getUrl());
        Assert.assertArrayEquals(new String[] { "malware 3" }, entries.getFilteredUrls().get(2).getHostedMalware());
        Assert.assertEquals("resolve.me:2345/world", entries.getFilteredUrls().get(3).getUrl());
        Assert.assertArrayEquals(new String[] { "malware 4" }, entries.getFilteredUrls().get(3).getHostedMalware());

        Assert.assertNotNull(entries.getFilteredIpPorts());
        Assert.assertEquals(2, entries.getFilteredIpPorts().size());
        Assert.assertEquals(Sets.newHashSet(1234, 2345), entries.getFilteredIpPorts().get("8.8.8.8"));
        Assert.assertEquals(Sets.newHashSet(1234, 2345), entries.getFilteredIpPorts().get("8.8.4.4"));
    }

    @Test(expected = MalwarePatrolProvider.NameResolutionException.class)
    public void testMalwareEntriesDnsErrorRate() throws Exception {
        Mockito.when(downloader.retrieveEntries()).thenReturn(Arrays.asList(
            new MalwareEntry("resolve.me:1234/hello", new String[] { "malware 3" }),
            new MalwareEntry("resolve.me:2345/world", new String[] { "malware 4" }),
            new MalwareEntry("resolve2.me:1234/hello", new String[] { "malware 3" }),
            new MalwareEntry("resolve2.me:2345/world", new String[] { "malware 4" })
        ));

        provider.getMalwareEntries();
    }

    @Test(expected = MalwarePatrolProvider.NameResolutionException.class)
    public void testMalwareEntriesDnsTimeout() throws Exception {
        Mockito.when(downloader.retrieveEntries()).thenReturn(Arrays.asList(
            new MalwareEntry("resolve.me:1234/hello", new String[] { "malware 3" }),
            new MalwareEntry("resolve.me:2345/world", new String[] { "malware 4" })
        ));

        Mockito.when(dnsResolver.resolve(Mockito.anyString())).thenAnswer(im -> {
            Thread.sleep(1100);
            return Inet4Address.getByName("1.2.3.4");
        });
        provider.getMalwareEntries();
    }
}