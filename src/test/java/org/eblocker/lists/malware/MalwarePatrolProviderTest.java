/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.lists.malware;

import org.eblocker.server.common.malware.MalwareEntry;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

public class MalwarePatrolProviderTest {

    private MalwarePatrolDownloader downloader;
    private MalwarePatrolProvider provider;

    @Before
    public void setUp() throws UnknownHostException {
        Properties properties = new Properties();

        downloader = Mockito.mock(MalwarePatrolDownloader.class);
        provider = new MalwarePatrolProvider(properties, downloader);
    }

    @Test
    public void getMalwareEntriesNoDns() throws Exception {
        Mockito.when(downloader.retrieveEntries()).thenReturn(Arrays.asList(
            new MalwareEntry("blog.com/cgi-bin", new String[]{ "malware 2" }),
            new MalwareEntry("google.com/malware", new String[]{ "malware 0", "malware 1" })
        ));

        MalwareEntries entries = provider.getMalwareEntries();
        Assert.assertNotNull(entries);
        Assert.assertNotNull(entries.getFilteredUrls());
        Assert.assertEquals(2, entries.getFilteredUrls().size());
        Assert.assertEquals("blog.com/cgi-bin", entries.getFilteredUrls().get(0).getUrl());
        Assert.assertArrayEquals(new String[]{ "malware 2" }, entries.getFilteredUrls().get(0).getHostedMalware());
        Assert.assertEquals("google.com/malware", entries.getFilteredUrls().get(1).getUrl());
        Assert.assertArrayEquals(new String[]{ "malware 0", "malware 1" }, entries.getFilteredUrls().get(1).getHostedMalware());
    }

    @Test
    public void testOptimizeEntries() throws Exception {
        Mockito.when(downloader.retrieveEntries()).thenReturn(Arrays.asList(
            new MalwareEntry("badhost.com/downloads", new String[]{ "malware" }),
            new MalwareEntry("badhost.com/downloads/abc", new String[]{ "malware" }), // no new information
            new MalwareEntry("badhost.com/downloads/xyz", new String[]{ "malware 2" })
        ));

        List<MalwareEntry> entries = provider.getMalwareEntries().getFilteredUrls();
        Assert.assertEquals(2, entries.size());
        Assert.assertEquals("badhost.com/downloads", entries.get(0).getUrl());
        Assert.assertEquals("badhost.com/downloads/xyz", entries.get(1).getUrl());
    }
}
