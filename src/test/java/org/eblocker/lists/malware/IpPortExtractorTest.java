package org.eblocker.lists.malware;

import org.eblocker.server.common.malware.MalwareEntry;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class IpPortExtractorTest {
    private DnsResolverService dnsResolverService;
    private IpPortExtractor extractor;

    @Before
    public void setUp() {
        dnsResolverService = Mockito.mock(DnsResolverService.class);
        extractor = new IpPortExtractor(dnsResolverService);
    }

    @Test
    public void test() throws Exception {
        List<MalwareEntry> entries = Arrays.asList(
            createEntry("standard-ports.org:80/malware", "Malware"),
            createEntry("standard-ports.org:443/malware", "Malware"),
            createEntry("funny-ports.com:8080/malware", "Malware"),
            createEntry("funny-ports.com:1080/", "Malware"),
            createEntry("strange-ports.me:1234/malware", "Malware"),
            createEntry("no-port.net/malware", "Malware"),
            createEntry("17.18.19.20:555", "Malware"),
            createEntry("ipv6.evil.net:8041/evil.exe", "Malware"),
            createEntry("[2a04:4711::A:b:c:42]:8042/evil.exe", "Malware")
        );
        List<HostPortTuple> unresolved = Arrays.asList(
            new HostPortTuple("funny-ports.com", 8080),
            new HostPortTuple("funny-ports.com", 1080),
            new HostPortTuple("strange-ports.me", 1234),
            new HostPortTuple("ipv6.evil.net", 8041)
        );
        List<HostPortTuple> resolved = Arrays.asList(
            new HostPortTuple("42.43.44.45", 8080),
            new HostPortTuple("42.43.44.45", 1080),
            new HostPortTuple("1.2.3.4", 1234),
            new HostPortTuple("1.2.3.5", 1234), // some hosts have more than one IP
            new HostPortTuple("2a04:4711::a:b:c:41", 8041)
        );
        Mockito.when(dnsResolverService.resolveHosts(unresolved)).thenReturn(resolved);
        Map<String, Set<Integer>> result = extractor.getIpsAndNonStandPorts(entries);
        Assert.assertEquals(6, result.size());
        Assert.assertEquals(Set.of(1080, 8080), result.get("42.43.44.45"));
        Assert.assertEquals(Set.of(1234), result.get("1.2.3.4"));
        Assert.assertEquals(Set.of(1234), result.get("1.2.3.5"));
        Assert.assertEquals(Set.of(555), result.get("17.18.19.20"));
        Assert.assertEquals(Set.of(8041), result.get("2a04:4711::a:b:c:41"));
        Assert.assertEquals(Set.of(8042), result.get("2a04:4711::A:b:c:42"));
    }

    @Test
    public void testGetHostWithNonStandardPort() {
        Assert.assertEquals(new HostPortTuple("2a04:4711::A:b:c:42", 8042), IpPortExtractor.getHostWithNonStandardPort("[2a04:4711::A:b:c:42]:8042/some/path"));
        Assert.assertEquals(new HostPortTuple("17.18.19.20", 555), IpPortExtractor.getHostWithNonStandardPort("17.18.19.20:555/some/path"));
        Assert.assertEquals(new HostPortTuple("funny-ports.com", 8080), IpPortExtractor.getHostWithNonStandardPort("funny-ports.com:8080"));
        Assert.assertNull(IpPortExtractor.getHostWithNonStandardPort("no-port.net/malware"));
        Assert.assertNull(IpPortExtractor.getHostWithNonStandardPort("standard-ports.org:80/malware"));
        Assert.assertNull(IpPortExtractor.getHostWithNonStandardPort("standard-ports.org:443/malware"));
    }

    private MalwareEntry createEntry(String url, String... malware) {
        return new MalwareEntry(url, malware);
    }
}
