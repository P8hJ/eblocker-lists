/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.lists.malware;

import org.eblocker.lists.tools.ResourceInputStream;
import org.eblocker.lists.util.HttpClient;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.io.ByteStreams;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Properties;
import java.util.zip.GZIPOutputStream;

public class PhishtankDownloaderTest {

    private static final String URL = "http://phishtank.eblocker.unit.test/list.gz";
    private static final String PREFIX = "prefix";
    private static final String RESPONSE_JSON = "phishtank-valid.json";

    private HttpClient httpClient;
    private PhishtankDownloader downloader;

    @Before
    public void setup() {
        Properties properties = new Properties();
        properties.setProperty("provider.phishtank.filteredUrls.prefix", PREFIX);
        properties.setProperty("provider.phishtank.url", URL);
        ObjectMapper objectMapper = new ObjectMapper();
        httpClient = Mockito.mock(HttpClient.class);
        downloader = new PhishtankDownloader(properties, objectMapper, httpClient);
    }

    @Test
    public void testParsingPhishtankExcerpt() throws MalwareListException, IOException {
        Mockito.when(httpClient.download(Mockito.eq(URL), Mockito.any(), Mockito.any()))
            .thenReturn(gzStream(ResourceInputStream.get(RESPONSE_JSON)));

        List<PhishtankEntry> entries = downloader.retrieveEntries();

        Assert.assertNotNull(entries);
        Assert.assertEquals(9, entries.size());
    }

    @Test
    public void testParsing() throws IOException, MalwareListException {
        Mockito.when(httpClient.download(Mockito.eq(URL), Mockito.any(), Mockito.any()))
            .thenReturn(gzStream("[{\"url\": \"http://host/path/\", \"target\":\"PayPal\"}," +
                "{\"url\": \"http://host2/path\", \"target\":\"PayPal\"}," +
                "{\"url\": \"https://host2/path/\", \"target\":\"eBay\"}]"));

        List<PhishtankEntry> entries = downloader.retrieveEntries();

        Assert.assertNotNull(entries);
        Assert.assertEquals(3, entries.size());

        Assert.assertEquals("host/path", entries.get(0).getUrl());
        Assert.assertEquals("prefixPayPal", entries.get(0).getTarget());

        Assert.assertEquals("host2/path", entries.get(1).getUrl());
        Assert.assertEquals("prefixPayPal", entries.get(1).getTarget());

        Assert.assertEquals("host2/path", entries.get(2).getUrl());
        Assert.assertEquals("prefixeBay", entries.get(2).getTarget());
    }

    @Test(expected = IOException.class)
    public void testDownloadFailure() throws MalwareListException, IOException {
        Mockito.when(httpClient.download(Mockito.eq(URL), Mockito.any(), Mockito.any()))
            .thenThrow(new IOException("test"));
        downloader.retrieveEntries();
    }

    @Test(expected = MalwareListException.class)
    public void testParsingErrorMissingUrl() throws MalwareListException, IOException {
        Mockito.when(httpClient.download(Mockito.eq(URL), Mockito.any(), Mockito.any()))
            .thenReturn(gzStream("[{\"target\":\"PayPal\"}]"));
        downloader.retrieveEntries();
    }

    @Test(expected = MalwareListException.class)
    public void testParsingErrorMissingTarget() throws MalwareListException, IOException {
        Mockito.when(httpClient.download(Mockito.eq(URL), Mockito.any(), Mockito.any()))
            .thenReturn(gzStream("[{\"url\":\"http://host/path\"}]"));
        downloader.retrieveEntries();
    }

    private InputStream gzStream(InputStream is) throws IOException {
        return gzStream(ByteStreams.toByteArray(is));
    }

    private InputStream gzStream(String s) throws IOException {
        return gzStream(s.getBytes());
    }

    private InputStream gzStream(byte[] json) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        GZIPOutputStream gzos = new GZIPOutputStream(baos);
        gzos.write(json);
        gzos.finish();
        return new ByteArrayInputStream(baos.toByteArray());
    }
}