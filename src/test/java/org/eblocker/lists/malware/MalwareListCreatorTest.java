/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.lists.malware;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.eblocker.server.common.malware.MalwareEntry;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

public class MalwareListCreatorTest {

    private Properties properties;
    private ObjectMapper objectMapper;

    private Path outputUrls;
    private Path outputIpPorts;
    private Path outputIp6Ports;

    private DnsResolver resolver;

    @Before
    public void setup() throws IOException {
        outputUrls = Files.createTempFile("malware-urls", ".json");
        outputIpPorts = Files.createTempFile("malware-ipPorts", ".json");
        outputIp6Ports = Files.createTempFile("malware-ip6Ports", ".json");

        properties = new Properties();
        properties.setProperty("output.filtered.urls", outputUrls.toString());
        properties.setProperty("output.filtered.ipPorts", outputIpPorts.toString());
        properties.setProperty("output.filtered.ip6Ports", outputIp6Ports.toString());
        properties.put("provider.malwarepatrol.dns.errorRatio", "0.5");
        properties.put("provider.malwarepatrol.dns.threads", "2");
        properties.put("provider.malwarepatrol.dns.timeoutSeconds", "1");

        objectMapper = new ObjectMapper();
        resolver = Mockito.mock(DnsResolver.class);
    }

    @After
    public void tearDown() throws IOException {
        Files.deleteIfExists(outputUrls);
        Files.deleteIfExists(outputIpPorts);
        Files.deleteIfExists(outputIp6Ports);
    }

    @Test
    public void test() throws MalwareListException, IOException {
        Mockito.when(resolver.resolve("host.com")).thenReturn(new InetAddress[]{ Inet4Address.getByName("1.1.1.1") });
        Mockito.when(resolver.resolve("host.net")).thenReturn(new InetAddress[]{ Inet4Address.getByName("2.2.2.2") });
        Mockito.when(resolver.resolve("host.org")).thenReturn(new InetAddress[]{ Inet4Address.getByName("3.3.3.3"), Inet6Address.getByName("2a04:4711::a:b:c:d") });
        MalwareEntries entriesA = new MalwareEntries(Arrays.asList(
            createEntry("host.com", "malware"),
            createEntry("host.com:8080", "malware"),
            createEntry("host.net:8443", "malware"))
        );

        MalwareEntries entriesB = new MalwareEntries(Arrays.asList(
            createEntry("host.com", "malware2"),
            createEntry("host.com:8000", "malware2"),
            createEntry("host.org:7999", "malware2"))
        );

        MalwareListCreator creator = new MalwareListCreator(properties, objectMapper, Arrays.asList(
            new TestProvider(entriesA),
            new TestProvider(entriesB)),
            resolver);

        creator.run();

        Assert.assertTrue(Files.exists(outputUrls));
        List<MalwareEntry> entries = objectMapper.readValue(Files.newInputStream(outputUrls), new TypeReference<List<MalwareEntry>>() {
        });
        Collections.sort(entries, Comparator.comparing(MalwareEntry::getUrl));
        Assert.assertEquals(5, entries.size());
        assertEquivalent(createEntry("host.com", "malware", "malware2"), entries.get(0)); // entries from A and B are merged
        assertEquivalent(createEntry("host.com:8000", "malware2"), entries.get(1));
        assertEquivalent(createEntry("host.com:8080", "malware"), entries.get(2));
        assertEquivalent(createEntry("host.net:8443", "malware"), entries.get(3));
        assertEquivalent(createEntry("host.org:7999", "malware2"), entries.get(4));

        Assert.assertTrue(Files.exists(outputIpPorts));
        Map<String, Set<Integer>> ipPorts = objectMapper.readValue(Files.newInputStream(outputIpPorts), new TypeReference<Map<String, Set<Integer>>>() {
        });
        Assert.assertEquals(3, ipPorts.size());
        Assert.assertEquals(Set.of(8080, 8000), ipPorts.get("1.1.1.1")); // ports from A and B are merged
        Assert.assertEquals(Set.of(8443), ipPorts.get("2.2.2.2"));
        Assert.assertEquals(Set.of(7999), ipPorts.get("3.3.3.3"));

        Assert.assertTrue(Files.exists(outputIp6Ports));
        Map<String, Set<Integer>> ip6Ports = objectMapper.readValue(Files.newInputStream(outputIp6Ports), new TypeReference<Map<String, Set<Integer>>>() {
        });
        Assert.assertEquals(1, ip6Ports.size());
        Assert.assertEquals(Set.of(7999), ip6Ports.get("2a04:4711:0:0:a:b:c:d"));
    }

    @Test(expected = MalwareListException.class)
    public void testProviderException() throws MalwareListException {
        MalwareListCreator creator = new MalwareListCreator(properties, objectMapper, Collections.singletonList(() -> {
            throw new MalwareListException("test");
        }), resolver);
        creator.run();
    }

    private MalwareEntry createEntry(String url, String... malware) {
        return new MalwareEntry(url, malware);
    }

    private void assertEquivalent(MalwareEntry expected, MalwareEntry actual) {
        Assert.assertEquals(expected.getUrl(), actual.getUrl());
        Assert.assertEquals(Set.of(expected.getHostedMalware()), Set.of(actual.getHostedMalware()));
    }

    private class TestProvider implements MalwareProvider {
        private MalwareEntries entries;

        public TestProvider(MalwareEntries entries) {
            this.entries = entries;
        }

        @Override
        public MalwareEntries getMalwareEntries() throws MalwareListException {
            return entries;
        }
    }
}