package org.eblocker.lists.malware;

import org.eblocker.lists.tools.ResourceInputStream;
import org.eblocker.lists.util.HttpClient;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

import static org.eblocker.lists.malware.UrlhausDownloader.URL_KEY;
import static org.junit.Assert.assertEquals;

public class UrlhausDownloaderTest {
    private static final String URL = "https://urlhaus.abuse.ch/downloads/csv_online/";

    private HttpClient httpClient;
    private UrlhausDownloader downloader;
    private static final String RESPONSE_CSV = "urlhaus-valid.csv";

    @Before
    public void setup() {
        Properties properties = new Properties();
        properties.setProperty(URL_KEY, URL);
        httpClient = Mockito.mock(HttpClient.class);
        downloader = new UrlhausDownloader(properties, httpClient);
    }

    @Test
    public void retrieveEntries() throws Exception {
        Mockito.when(httpClient.download(Mockito.eq(URL), Mockito.any(), Mockito.any()))
                .thenReturn(ResourceInputStream.get(RESPONSE_CSV));
        List<UrlhausEntry> urlhausEntries = downloader.retrieveEntries().collect(Collectors.toList());

        assertEquals(3, urlhausEntries.size());

        UrlhausEntry hostAndPort = urlhausEntries.get(0);
        assertEquals("http://125.41.107.36:55348/i", hostAndPort.getUrl());

        UrlhausEntry ipDefaultPort = urlhausEntries.get(1);
        assertEquals("http://122.254.29.37/.i", ipDefaultPort.getUrl());
        assertEquals("malware_download", ipDefaultPort.getThreat());
        assertEquals("32-bit,arm,elf", ipDefaultPort.getTags());

        UrlhausEntry hostnameDefaultPort = urlhausEntries.get(2);
        assertEquals("https://bad.com/bin.sh", hostnameDefaultPort.getUrl());
    }
}