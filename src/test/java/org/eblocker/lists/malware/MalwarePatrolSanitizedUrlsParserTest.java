/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.lists.malware;


import org.eblocker.server.common.malware.MalwareEntry;
import org.eblocker.server.icap.resources.EblockerResource;
import org.eblocker.server.icap.resources.ResourceHandler;
import org.eblocker.server.icap.resources.SimpleResource;
import com.google.common.io.ByteStreams;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class MalwarePatrolSanitizedUrlsParserTest {

    private final EblockerResource MALWARE_RESOURCE = new SimpleResource("classpath:malwarepatrol-sanitized.txt");
    private Path filePath;
    private MalwarePatrolSanitizedUrlsParser parser;

    @Before
    public void setup() throws IOException {
        filePath = Files.createTempFile("malwarepatrol-sanitized", ".txt");
        writeResourceToPath(MALWARE_RESOURCE, filePath);
        parser = new MalwarePatrolSanitizedUrlsParser();
    }

    @After
    public void tearDown() throws IOException {
        Files.deleteIfExists(filePath);
    }

    @Test
    public void testParse() throws IOException {
        List<MalwareEntry> entries = parser.parse(filePath);
        Assert.assertEquals(4, entries.size());

        Map<String, String[]> entryByUrl = entries.stream().collect(Collectors.toMap(MalwareEntry::getUrl, MalwareEntry::getHostedMalware));

        Assert.assertArrayEquals(new String[] { "Trojan.Downloader.Win32.Delf.tp" }, entryByUrl.get("perso.wanadoo.es/download789"));
        Assert.assertArrayEquals(new String[] { "Trojan.Downloader.Win32.Banload.ap" }, entryByUrl.get("perso.wanadoo.es/voxcard_01"));
        Assert.assertArrayEquals(new String[] { ".W32.Riskware!Online", "AdWare.Win32.MyWay.bp" }, entryByUrl.get("ak.exe.imgfarm.com/images/nocache/funwebproducts/2.3.50.62"));
        Assert.assertArrayEquals(new String[] { "Downloader.NSIS.Agent.ef", "Downloader.Win32.Somato.az" }, entryByUrl.get("static.bicdn.com/installers/b/7/FLVPlayer_downloader_by_network_smb_downloadlink"));

    }

    private void writeResourceToPath(EblockerResource resource, Path path) throws IOException {
        try (FileOutputStream fos = new FileOutputStream(path.toFile())) {
            ByteStreams.copy(ResourceHandler.getInputStream(resource), fos);
            fos.flush();
        }
    }

}
