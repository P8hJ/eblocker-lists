/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.lists.parentalcontrol.provider;

import org.eblocker.lists.parentalcontrol.DomainBlacklist;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Collections;

public class MalwareFileDomainProviderTest {

    private MalwareFileDomainProvider provider;
    private ObjectNode node;

    @Before
    public void setUp() {
        provider = new MalwareFileDomainProvider(new ObjectMapper());

        node = JsonNodeFactory.instance.objectNode();
        node.put("fileName", "file-provider-test-malware.json");
    }

    @Test
    public void createBlacklist() {
        DomainBlacklist blacklist = provider.createBlacklist(node);
        Assert.assertNotNull(blacklist);
        Assert.assertEquals(Collections.singleton("www.microsoft.com"), blacklist.getList());
        Assert.assertTrue(Duration.between(LocalDateTime.now(), blacklist.getDate()).getSeconds() < 60);
    }
}