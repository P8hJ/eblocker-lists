/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.lists.malware;

import org.eblocker.server.common.malware.MalwareEntry;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Properties;

class MalwarePatrolProvider implements MalwareProvider {
    private final MalwarePatrolDownloader downloader;

    public MalwarePatrolProvider(Properties properties, MalwarePatrolDownloader downloader) {
        this.downloader = downloader;
    }

    @Override
    public MalwareEntries getMalwareEntries() throws MalwareListException {
        try {
            List<MalwareEntry> filteredUrls = downloader.retrieveEntries();
            filteredUrls = removeRedundantEntries(filteredUrls);
            return new MalwareEntries(filteredUrls);
        } catch (IOException e) {
            throw new MalwareListException("i/o error", e);
        }
    }

    /**
     * Remove redundant entries, e.g. if a directory on a server is on the list, all URLs that represent
     * files in the directory can be removed (provided the hosted malware is the same)
     * Side-effects: the entries are sorted by URLs.
     *
     * @param entries
     */
    private List<MalwareEntry> removeRedundantEntries(List<MalwareEntry> entries) {
        entries.sort(Comparator.comparing(MalwareEntry::getUrl));
        List<MalwareEntry> result = new ArrayList<>();
        MalwareEntry lastEntry = null;
        for (MalwareEntry entry : entries) {
            if (lastEntry == null || !matchesEntry(entry, lastEntry)) {
                result.add(entry);
                lastEntry = entry;
            }
        }
        return result;
    }

    private boolean matchesEntry(MalwareEntry entry, MalwareEntry lastEntry) {
        return entry.getUrl().startsWith(lastEntry.getUrl()) &&
            Arrays.equals(entry.getHostedMalware(), lastEntry.getHostedMalware());
    }

}
