package org.eblocker.lists.malware;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Resolves many hosts in parallel threads.
 */
public class DnsResolverService {
    private static final Logger log = LoggerFactory.getLogger(DnsResolverService.class);

    private static final String DNS_ERROR_RATIO = "provider.malwarepatrol.dns.errorRatio";
    private static final String DNS_THREADS = "provider.malwarepatrol.dns.threads";
    private static final String DNS_TIMEOUT_SECONDS = "provider.malwarepatrol.dns.timeoutSeconds";
    private final DnsResolver resolver;

    private final float dnsErrorRatio;
    private final int dnsThreads;
    private final int dnsTimeoutSeconds;

    public DnsResolverService(Properties properties, DnsResolver resolver) {
        this.resolver = resolver;

        dnsErrorRatio = Float.parseFloat(properties.getProperty(DNS_ERROR_RATIO));
        dnsThreads = Integer.parseInt(properties.getProperty(DNS_THREADS));
        dnsTimeoutSeconds = Integer.parseInt(properties.getProperty(DNS_TIMEOUT_SECONDS));
    }

    public Collection<HostPortTuple> resolveHosts(List<HostPortTuple> unresolved) throws NameResolutionException {
        AtomicInteger errors = new AtomicInteger();
        ConcurrentLinkedQueue<HostPortTuple> resolved = new ConcurrentLinkedQueue<>();
        ExecutorService executorService = createExecutorService();
        unresolved.stream().forEach(t -> executorService.submit(() -> resolve(t, resolved, errors)));

        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(dnsTimeoutSeconds, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
                throw new NameResolutionException("failed to resolve hosts in " + dnsTimeoutSeconds + " seconds");
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
            Thread.currentThread().interrupt();
            throw new NameResolutionException("interrupted while waiting for host resolution", e);
        }

        if (errors.get() > 0) {
            float ratio = (float) errors.get() / unresolved.size();
            log.warn("{} of {} hosts did not resolve ({})", errors, unresolved.size(), ratio);

            if (ratio >= dnsErrorRatio) {
                throw new NameResolutionException("failure ratio too high: " + ratio);
            }
        }
        log.info("{} hosts resolved to {} ip-addresses", unresolved.size(), resolved.size());
        return resolved;
    }

    private ExecutorService createExecutorService() {
        // custom thread-factory is used to allow vm-exit before all threads are done. Otherwise exit on timeout
        // will be delayed until currently running threads are done.
        final AtomicInteger i = new AtomicInteger();
        return Executors.newFixedThreadPool(dnsThreads, r -> {
            Thread thread = new Thread(r, "dns-resolver-" + i.incrementAndGet());
            thread.setDaemon(true);
            return thread;
        });
    }

    private void resolve(HostPortTuple t, Collection<HostPortTuple> results, AtomicInteger errors) {
        try {
            log.debug("resolving {}", t);

            for (InetAddress inetAddress : resolver.resolve(t.host)) {
                log.debug("{}: {}", t, inetAddress.getHostAddress());
                results.add(new HostPortTuple(inetAddress.getHostAddress(), t.port));
            }
        } catch (UnknownHostException e) {
            log.warn("failed to resolve {}", t.host, e);
            errors.incrementAndGet();
        }
    }

}
